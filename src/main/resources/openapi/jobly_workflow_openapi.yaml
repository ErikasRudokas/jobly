openapi: 3.0.4
info:
  title: Jobly API
  description: |-
    This service will be used to manage the Jobly application.
  version: 1.0.0
servers:
  - url: https://jobly.com/api/v1
paths:
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - User Authentication
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegisterResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedMessage'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorMessage'

  /auth/login:
    post:
      summary: User login
      tags:
        - User Authentication
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginRequest'
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLoginResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedMessage'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenMessage'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorMessage'

  /auth/refresh:
    post:
      summary: Refresh access token
      tags:
        - User Authentication
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedMessage'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorMessage'

  /categories:
    get:
      summary: Get all categories
      tags:
        - Categories
      operationId: getAllCategories
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: A list of categories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllCategoriesResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedMessage'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorMessage'

  /categories/{id}:
    get:
      summary: Get category by ID
      tags:
        - Categories
      operationId: getCategoryById
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the category to retrieve
      responses:
        '200':
          description: Category details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedMessage'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenMessage'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorMessage'
    delete:
      summary: Delete category by ID
      tags:
        - Categories
      operationId: deleteCategoryById
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the category to delete
      responses:
        '204':
          description: Category deleted successfully
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedMessage'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenMessage'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorMessage'
    put:
      summary: Update an existing category
      tags:
        - Categories
      operationId: updateCategory
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the category to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryUpdateRequest'
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedMessage'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenMessage'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorMessage'

  /categories/create:
    post:
      summary: Create a new category
      tags:
        - Categories
      operationId: createCategory
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryCreateRequest'
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedMessage'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorMessage'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    DateTime:
      type: string
      format: date-time
      example: '2023-10-01T12:00:00Z'

    BadRequestMessage:
      type: object
      properties:
        status:
          type: integer
          example: 400
        timestamp:
          $ref: '#/components/schemas/DateTime'
        message:
          type: string
          example: Invalid input data

    UnauthorizedMessage:
      type: object
      properties:
        status:
          type: integer
          example: 401
        timestamp:
          $ref: '#/components/schemas/DateTime'
        message:
          type: string
          example: User is unauthorized to access this resource

    ForbiddenMessage:
      type: object
      properties:
        status:
          type: integer
          example: 403
        timestamp:
          $ref: '#/components/schemas/DateTime'
        message:
          type: string
          example: User is forbidden from accessing this resource

    NotFoundMessage:
      type: object
      properties:
        status:
          type: integer
          example: 404
        timestamp:
          $ref: '#/components/schemas/DateTime'
        message:
          type: string
          example: Resource not found

    ConflictMessage:
      type: object
      properties:
        status:
          type: integer
          example: 409
        timestamp:
          $ref: '#/components/schemas/DateTime'
        message:
          type: string
          example: Resource already exists

    InternalServerErrorMessage:
      type: object
      properties:
        status:
          type: integer
          example: 500
        timestamp:
          $ref: '#/components/schemas/DateTime'
        message:
          type: string
          example: An unexpected error occurred on the server

    UserRegisterRequest:
      type: object
      properties:
        firstName:
          type: string
          example: John
          maxLength: 20
        lastName:
          type: string
          example: Doe
          maxLength: 20
        username:
          type: string
          example: john.doe
          maxLength: 32
        email:
          type: string
          format: email
          example: john.doe@gmail.com
        password:
          type: string
          format: password
          example: StrongP@ssw0rd!
          minLength: 8
          maxLength: 64

    UserRegisterResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        username:
          type: string
          example: john.doe
        email:
          type: string
          format: email

    UserLoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: john.doe@gmail.com
        password:
          type: string
          format: password
          example: StrongP@ssw0rd!
          minLength: 8
          maxLength: 64

    UserLoginResponse:
      type: object
      properties:
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        refreshToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

    RefreshTokenRequest:
      type: object
      properties:
        refreshToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

    RefreshTokenResponse:
      type: object
      properties:
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

    GetAllCategoriesResponse:
      type: object
      properties:
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Category'

    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: Software Development
        description:
          type: string
          example: Jobs related to software development and programming
        createdAt:
          $ref: '#/components/schemas/DateTime'
        updatedAt:
          $ref: '#/components/schemas/DateTime'

    CategoryCreateRequest:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
          example: Software Development
          maxLength: 32
        description:
          type: string
          example: Jobs related to software development and programming
          maxLength: 255

    CategoryUpdateRequest:
      type: object
      required:
        - id
        - name
        - description
      properties:
        name:
          type: string
          example: Software Development
          maxLength: 32
        description:
          type: string
          example: Jobs related to software development and programming
          maxLength: 255