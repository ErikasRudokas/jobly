openapi: 3.0.4
info:
  title: Jobly API
  description: |-
    This service will be used to manage the Jobly application.
  version: 1.0.0
servers:
  - url: https://jobly.com/api/v1
paths:
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - User Authentication
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegisterResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedMessage'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorMessage'

  /auth/login:
    post:
      summary: User login
      tags:
        - User Authentication
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginRequest'
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLoginResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedMessage'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenMessage'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorMessage'

  /auth/refresh:
    post:
      summary: Refresh access token
      tags:
        - User Authentication
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedMessage'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorMessage'

  /users/me:
    get:
      summary: Get authenticated user's details
      tags:
        - User Details
      operationId: getUserDetails
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserDetailsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedMessage'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorMessage'

  /users/cv:
    post:
      summary: Upload a CV for the authenticated user
      tags:
        - User Details
      operationId: uploadUserCv
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
            encoding:
              file:
                contentType: application/pdf
      responses:
        '200':
          description: CV uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CvUploadResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedMessage'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorMessage'

  /users/{id}/cv:
    get:
      summary: Download a user's CV by user ID
      tags:
        - User Details
      operationId: downloadUserCv
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/SystemGeneratedId'
          description: The ID of the user whose CV is to be downloaded
      responses:
        '200':
          description: CV downloaded successfully
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedMessage'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenMessage'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorMessage'

  /categories:
    get:
      summary: Get all categories
      tags:
        - Categories
      operationId: getAllCategories
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: A list of categories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllCategoriesResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedMessage'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorMessage'

  /categories/{id}:
    get:
      summary: Get category by ID
      tags:
        - Categories
      operationId: getCategoryById
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the category to retrieve
      responses:
        '200':
          description: Category details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedMessage'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenMessage'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorMessage'
    delete:
      summary: Delete category by ID
      tags:
        - Categories
      operationId: deleteCategoryById
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the category to delete
      responses:
        '204':
          description: Category deleted successfully
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedMessage'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenMessage'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorMessage'
    put:
      summary: Update an existing category
      tags:
        - Categories
      operationId: updateCategory
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the category to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryUpdateRequest'
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedMessage'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenMessage'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorMessage'

  /categories/create:
    post:
      summary: Create a new category
      tags:
        - Categories
      operationId: createCategory
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryCreateRequest'
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedMessage'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorMessage'

  /job-offers:
    get:
      summary: Get all job offers
      tags:
        - Job Offers
      operationId: getAllJobOffers
      responses:
        '200':
          description: A list of all job offers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllJobOffersResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedMessage'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorMessage'

  /job-offers/{id}:
    get:
      summary: Get job offer by ID
      tags:
        - Job Offers
      operationId: getJobOfferById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the job offer to retrieve
      responses:
        '200':
          description: Job offer details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobOfferDetailsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedMessage'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenMessage'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorMessage'
    put:
      summary: Update an existing job offer
      tags:
        - Job Offers
      operationId: updateJobOffer
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the job offer to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateJobOfferRequest'
      responses:
        '200':
          description: Job offer updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobOffer'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedMessage'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenMessage'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorMessage'
    delete:
      summary: Delete job offer by ID
      tags:
        - Job Offers
      operationId: deleteJobOffer
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the job offer to delete
      responses:
        '204':
          description: Job offer deleted successfully
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedMessage'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenMessage'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorMessage'

  /job-offers/mine:
    get:
      summary: Get job offers owned by the authenticated user
      tags:
        - Job Offers
      operationId: getOwnedJobOffers
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: A list of job offers owned by the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMineJobOffersResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedMessage'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorMessage'

  /job-offers/mine/{id}:
    get:
      summary: Get job offer and its applications owned by the authenticated user
      tags:
        - Job Offers
      operationId: getOwnedJobOfferDetails
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the job offer and its applications to retrieve
      responses:
        '200':
          description: Job offer and applications related to it
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobOfferWithApplicationsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedMessage'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenMessage'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorMessage'

  /job-offers/create:
    post:
      summary: Create a new job offer
      tags:
        - Job Offers
      operationId: createJobOffer
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateJobOfferRequest'
      responses:
        '201':
          description: Job offer created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobOffer'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedMessage'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorMessage'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    DateTime:
      type: string
      format: date-time
      example: '2023-10-01T12:00:00Z'

    SystemGeneratedId:
      type: integer
      format: int64
      example: 1

    BadRequestMessage:
      type: object
      properties:
        status:
          type: integer
          example: 400
        timestamp:
          $ref: '#/components/schemas/DateTime'
        message:
          type: string
          example: Invalid input data

    UnauthorizedMessage:
      type: object
      properties:
        status:
          type: integer
          example: 401
        timestamp:
          $ref: '#/components/schemas/DateTime'
        message:
          type: string
          example: User is unauthorized to access this resource

    ForbiddenMessage:
      type: object
      properties:
        status:
          type: integer
          example: 403
        timestamp:
          $ref: '#/components/schemas/DateTime'
        message:
          type: string
          example: User is forbidden from accessing this resource

    NotFoundMessage:
      type: object
      properties:
        status:
          type: integer
          example: 404
        timestamp:
          $ref: '#/components/schemas/DateTime'
        message:
          type: string
          example: Resource not found

    ConflictMessage:
      type: object
      properties:
        status:
          type: integer
          example: 409
        timestamp:
          $ref: '#/components/schemas/DateTime'
        message:
          type: string
          example: Resource already exists

    InternalServerErrorMessage:
      type: object
      properties:
        status:
          type: integer
          example: 500
        timestamp:
          $ref: '#/components/schemas/DateTime'
        message:
          type: string
          example: An unexpected error occurred on the server

    UserRegisterRequest:
      type: object
      properties:
        firstName:
          type: string
          example: John
          maxLength: 20
        lastName:
          type: string
          example: Doe
          maxLength: 20
        username:
          type: string
          example: john.doe
          maxLength: 32
        email:
          type: string
          format: email
          example: john.doe@gmail.com
        password:
          type: string
          format: password
          example: StrongP@ssw0rd!
          minLength: 8
          maxLength: 64

    UserRegisterResponse:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/SystemGeneratedId'
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        username:
          type: string
          example: john.doe
        email:
          type: string
          format: email

    UserLoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: john.doe@gmail.com
        password:
          type: string
          format: password
          example: StrongP@ssw0rd!
          minLength: 8
          maxLength: 64

    UserLoginResponse:
      type: object
      properties:
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        refreshToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

    RefreshTokenRequest:
      type: object
      properties:
        refreshToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

    RefreshTokenResponse:
      type: object
      properties:
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

    GetAllCategoriesResponse:
      type: object
      properties:
        total:
          type: integer
          example: 3
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Category'

    Category:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/SystemGeneratedId'
        name:
          type: string
          example: Software Development
        description:
          type: string
          example: Jobs related to software development and programming
        createdAt:
          $ref: '#/components/schemas/DateTime'
        updatedAt:
          $ref: '#/components/schemas/DateTime'

    CategoryCreateRequest:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
          example: Software Development
          maxLength: 32
        description:
          type: string
          example: Jobs related to software development and programming
          maxLength: 255

    CategoryUpdateRequest:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
          example: Software Development
          maxLength: 32
        description:
          type: string
          example: Jobs related to software development and programming
          maxLength: 255

    GetAllJobOffersResponse:
      type: object
      properties:
        total:
          type: integer
          example: 5
        jobOffers:
          type: array
          items:
            $ref: '#/components/schemas/JobOfferListObject'

    GetMineJobOffersResponse:
      type: object
      properties:
        total:
          type: integer
          example: 5
        jobOffers:
          type: array
          items:
            $ref: '#/components/schemas/JobOfferListObject'

    JobOfferListObject:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/SystemGeneratedId'
        title:
          type: string
          example: Senior Java Developer
          maxLength: 32
        companyName:
          type: string
          example: Tech Solutions Inc.
          maxLength: 60
        salary:
          type: number
          format: float
          example: 85000.00
        workType:
          $ref: '#/components/schemas/WorkType'
        location:
          type: string
          example: New York, NY
          maxLength: 100
        category:
          $ref: '#/components/schemas/JobOfferCategory'

    JobOffer:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/SystemGeneratedId'
        title:
          type: string
          example: Senior Java Developer
          maxLength: 32
        description:
          type: string
          example: We are looking for a Senior Java Developer with 5+ years of experience...
          maxLength: 1024
        companyName:
          type: string
          example: Tech Solutions Inc.
          maxLength: 60
        salary:
          type: number
          format: float
          example: 85000.00
        yearsOfExperience:
          type: integer
          format: int32
          example: 5
        workType:
          $ref: '#/components/schemas/WorkType'
        location:
          type: string
          example: New York, NY
          maxLength: 100
        contactEmail:
          type: string
          format: email
        contactPhone:
          type: string
          example: +37061234567
          maxLength: 15
        offerStatus:
          $ref: '#/components/schemas/JobOfferStatus'
        createdAt:
          $ref: '#/components/schemas/DateTime'
        updatedAt:
          $ref: '#/components/schemas/DateTime'
        category:
          $ref: '#/components/schemas/JobOfferCategory'
        creator:
          $ref: '#/components/schemas/Creator'

    WorkType:
      type: string
      enum: [ ON_SITE, REMOTE, HYBRID ]

    JobOfferStatus:
      type: string
      enum: [ OPEN, CLOSED ]

    JobOfferCategory:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/SystemGeneratedId'
        name:
          type: string
          example: Software Development
          maxLength: 32

    Creator:
      type: object
      properties:
        firstName:
          type: string
          example: John
          maxLength: 20
        lastName:
          type: string
          example: Doe
          maxLength: 20

    Application:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/SystemGeneratedId'
        comment:
          type: string
          maxLength: 1000
        createdAt:
          $ref: '#/components/schemas/DateTime'
        updatedAt:
          $ref: '#/components/schemas/DateTime'
        applicant:
          $ref: '#/components/schemas/Applicant'
        cvId:
          $ref: '#/components/schemas/SystemGeneratedId'

    Applicant:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/SystemGeneratedId'
        firstName:
          type: string
          example: Jane
          maxLength: 20
        lastName:
          type: string
          example: Smith
          maxLength: 20
        email:
          type: string
          format: email

    JobOfferWithApplicationsResponse:
      type: object
      properties:
        jobOffer:
          $ref: '#/components/schemas/JobOffer'
        applications:
          type: array
          items:
            $ref: '#/components/schemas/Application'

    JobOfferDetailsResponse:
      type: object
      properties:
        jobOffer:
          $ref: '#/components/schemas/JobOffer'

    CreateJobOfferRequest:
      type: object
      required:
        - title
        - description
        - companyName
        - salary
        - yearsOfExperience
        - workType
        - contactEmail
        - categoryId
      properties:
        title:
          type: string
          example: Senior Java Developer
          maxLength: 32
        description:
          type: string
          example: We are looking for a Senior Java Developer with 5+ years of experience...
          maxLength: 1024
        companyName:
          type: string
          example: Tech Solutions Inc.
          maxLength: 60
        salary:
          type: number
          format: float
          example: 85000.00
        yearsOfExperience:
          type: integer
          format: int32
          example: 5
        workType:
          $ref: '#/components/schemas/WorkType'
        location:
          type: string
          example: New York, NY
          maxLength: 100
        contactEmail:
          type: string
          format: email
        contactPhone:
          type: string
          example: +37061234567
          maxLength: 15
        categoryId:
          $ref: '#/components/schemas/SystemGeneratedId'

    UpdateJobOfferRequest:
      type: object
      required:
        - title
        - description
        - companyName
        - salary
        - yearsOfExperience
        - workType
        - contactEmail
        - categoryId
      properties:
        title:
          type: string
          example: Senior Java Developer
          maxLength: 32
        description:
          type: string
          example: We are looking for a Senior Java Developer with 5+ years of experience...
          maxLength: 1024
        companyName:
          type: string
          example: Tech Solutions Inc.
          maxLength: 60
        salary:
          type: number
          format: float
          example: 85000.00
        yearsOfExperience:
          type: integer
          format: int32
          example: 5
        workType:
          $ref: '#/components/schemas/WorkType'
        location:
          type: string
          example: New York, NY
          maxLength: 100
        contactEmail:
          type: string
          format: email
        contactPhone:
          type: string
          example: +37061234567
          maxLength: 15
        categoryId:
          $ref: '#/components/schemas/SystemGeneratedId'

    GetUserDetailsResponse:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/SystemGeneratedId'
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        username:
          type: string
          example: john.doe
        email:
          type: string
          format: email

    ModifyUserDetailsRequest:
      type: object
      properties:
        firstName:
          type: string
          example: John
          maxLength: 20
        lastName:
          type: string
          example: Doe
          maxLength: 20
        username:
          type: string
          example: john.doe
          maxLength: 32
        email:
          type: string
          format: email

    CvUploadResponse:
      type: object
      properties:
        cvId:
          $ref: '#/components/schemas/SystemGeneratedId'